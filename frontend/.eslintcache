[{"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/index.js":"1","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/AppContainer.js":"2","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/store.ts":"3","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/App.js":"4","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/ingredients.js":"5","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/login.js":"6","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/defineIngredientDialogue.js":"7","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/nutrients.js":"8","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/dailyData.js":"9","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/dateSelect.js":"10","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/caloriesTarget.js":"11","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/util/DynamicRouteContainer.js":"12","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/Header.js":"13","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Advertisement/AdvertisementFooter.js":"14","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/analyzeFoods.js":"15","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/fetchResourceFromBackend.js":"16","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/util/DynamicRoute.js":"17","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/MyMenuContainer.js":"18","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Advertisement/embedAltcoinGraph.js":"19","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/nutrientsMap.js":"20","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/MyMenu.js":"21","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorContainer.js":"22","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/CalendarContainer.js":"23","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/StatisticsContainer.js":"24","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/ProfileContainer.js":"25","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/Profile.js":"26","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/Statistics.js":"27","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/Calculator.js":"28","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/index.js":"29","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/Calendar.js":"30","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/CaloriesGraphContainer.js":"31","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/ProfileForm.js":"32","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/DataSaver/DataSaverContainer.js":"33","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/NutritionResultsTable/NutritionResultsTableContainer.js":"34","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/LoginBoxContainer.js":"35","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/CalculatorForm.js":"36","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/MyDayBackgroundWrapper.js":"37","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/CaloriesGraph.js":"38","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/DataSaver/DataSaver.js":"39","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/NutritionResultsTable/NutritionResultsTable.js":"40","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/LoginBoxForm.js":"41","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/NutrientsListComponent.js":"42","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/MyDialog.js":"43","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/MyTextField.js":"44","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/NutrientRow.js":"45","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/FieldComponent.js":"46","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/FormControlWrapperContainer.js":"47","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/MyAutosuggest.js":"48"},{"size":383,"mtime":1606082434051,"results":"49","hashOfConfig":"50"},{"size":306,"mtime":1606080258291,"results":"51","hashOfConfig":"50"},{"size":3498,"mtime":1606082831739,"results":"52","hashOfConfig":"50"},{"size":2798,"mtime":1606090992484,"results":"53","hashOfConfig":"50"},{"size":1074,"mtime":1606080258291,"results":"54","hashOfConfig":"50"},{"size":2111,"mtime":1606083531287,"results":"55","hashOfConfig":"50"},{"size":1945,"mtime":1606080258291,"results":"56","hashOfConfig":"50"},{"size":1863,"mtime":1609031760396,"results":"57","hashOfConfig":"50"},{"size":1680,"mtime":1606080258291,"results":"58","hashOfConfig":"50"},{"size":599,"mtime":1606080258291,"results":"59","hashOfConfig":"50"},{"size":1130,"mtime":1606080258291,"results":"60","hashOfConfig":"50"},{"size":339,"mtime":1606080258291,"results":"61","hashOfConfig":"50"},{"size":579,"mtime":1606087871820,"results":"62","hashOfConfig":"50"},{"size":1075,"mtime":1606080258291,"results":"63","hashOfConfig":"50"},{"size":4265,"mtime":1606080258291,"results":"64","hashOfConfig":"50"},{"size":2106,"mtime":1606087553880,"results":"65","hashOfConfig":"50"},{"size":2933,"mtime":1606086036945,"results":"66","hashOfConfig":"50"},{"size":665,"mtime":1606091299932,"results":"67","hashOfConfig":"50"},{"size":1171,"mtime":1606090741977,"results":"68","hashOfConfig":"50"},{"size":1111,"mtime":1606080258291,"results":"69","hashOfConfig":"50"},{"size":2536,"mtime":1606091422300,"results":"70","hashOfConfig":"50"},{"size":517,"mtime":1606082352835,"results":"71","hashOfConfig":"50"},{"size":692,"mtime":1606083543171,"results":"72","hashOfConfig":"50"},{"size":297,"mtime":1606080258291,"results":"73","hashOfConfig":"50"},{"size":493,"mtime":1606082128407,"results":"74","hashOfConfig":"50"},{"size":1297,"mtime":1606080258291,"results":"75","hashOfConfig":"50"},{"size":838,"mtime":1606080258291,"results":"76","hashOfConfig":"50"},{"size":919,"mtime":1606080258291,"results":"77","hashOfConfig":"50"},{"size":635,"mtime":1606085995156,"results":"78","hashOfConfig":"50"},{"size":1706,"mtime":1609029111536,"results":"79","hashOfConfig":"50"},{"size":903,"mtime":1606080258291,"results":"80","hashOfConfig":"50"},{"size":5685,"mtime":1606089426175,"results":"81","hashOfConfig":"50"},{"size":667,"mtime":1606083537899,"results":"82","hashOfConfig":"50"},{"size":393,"mtime":1606080258291,"results":"83","hashOfConfig":"50"},{"size":705,"mtime":1606082365403,"results":"84","hashOfConfig":"50"},{"size":1110,"mtime":1606080258291,"results":"85","hashOfConfig":"50"},{"size":2072,"mtime":1606083898272,"results":"86","hashOfConfig":"50"},{"size":3097,"mtime":1606080258291,"results":"87","hashOfConfig":"50"},{"size":3066,"mtime":1606090564857,"results":"88","hashOfConfig":"50"},{"size":1154,"mtime":1606080258291,"results":"89","hashOfConfig":"50"},{"size":2936,"mtime":1606087920933,"results":"90","hashOfConfig":"50"},{"size":1642,"mtime":1606090552161,"results":"91","hashOfConfig":"50"},{"size":904,"mtime":1606089426175,"results":"92","hashOfConfig":"50"},{"size":880,"mtime":1606086932256,"results":"93","hashOfConfig":"50"},{"size":1259,"mtime":1609029645154,"results":"94","hashOfConfig":"50"},{"size":749,"mtime":1606080258291,"results":"95","hashOfConfig":"50"},{"size":1717,"mtime":1606089338399,"results":"96","hashOfConfig":"50"},{"size":3581,"mtime":1606089343779,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"15i12zs",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"190","usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"100"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"218"},"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/index.js",[],["219","220"],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/AppContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/store.ts",[],["221","222"],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/App.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/ingredients.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/login.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/defineIngredientDialogue.js",["223","224"],"import {fetchResourceFromBackend} from './utilities/fetchResourceFromBackend';\n\nconst closeDialogue = () => (dispatch) => {\n    \n    return dispatch({type: 'CLOSE_DIALOGUE'});\n\n    /*fetchResourceFromBackend('/api/ingredients', options).then( result => {\n\n        console.log(result);\n        dispatch({type: 'INGREDIENT_SAVED', ingredientId: result});\n\n        dispatch(fetchIngredients());\n\n    });*/\n};\n\nconst openDialogue = (initialValues = {}, editId) => (dispatch) => {\n\n\n    console.log('initial values:', initialValues);\n    \n    dispatch({type: 'OPEN_DIALOGUE', initialValues, editId});\n\n    /*fetchResourceFromBackend('/api/ingredients/' + ingredientId, options).then( result => {\n\n        console.log(result);\n        dispatch({type: 'INGREDIENT_DELETED', ingredientId: ingredientId});\n\n        dispatch(fetchIngredients());\n\n    });*/\n};\n\n// not used currently\nconst saveDialogue = () => (dispatch) => {\n    \n    dispatch({type: 'INGREDIENT_SAVING'});\n\n    dispatch(closeDialogue());\n\n    /*const options = {method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(ingredient)};\n\n    fetchResourceFromBackend('/api/ingredients', options).then( result => {\n\n        console.log(result);\n        dispatch({type: 'INGREDIENT_SAVED', ingredientId: result});\n\n        dispatch(fetchIngredients());\n\n    });*/\n};\n\nconst defineIngredientDialogueReducer = (state={open: false, initialValues: {}, editId: undefined},  action) => {\n    switch (action.type) {\n        case 'OPEN_DIALOGUE':\n            console.log('OPEN_DIALOGUE');\n            return {open: true, initialValues: action.initialValues, editId: action.editId};\n        case 'CLOSE_DIALOGUE':\n            console.log('CLOSE_DIALOGUE');\n            return {open: false, initialValues: {}, editId: state.editId};\n        default:\n            return state;\n    }\n};\n\n\nexport {defineIngredientDialogueReducer, openDialogue, closeDialogue/*, saveDialogue*/};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/nutrients.js",["225"],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/dailyData.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/dateSelect.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/caloriesTarget.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/util/DynamicRouteContainer.js",["226"],"import {connect} from 'react-redux';\n\nimport {DynamicRoute} from './DynamicRoute';\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\nconst mapStateToProps = (state) => ({\n    authorized: state.login.authorized\n});\n\nconst DynamicRouteContainer = connect(mapStateToProps, mapDispatchToProps)(DynamicRoute);\n\nexport {DynamicRouteContainer};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/Header.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Advertisement/AdvertisementFooter.js",["227"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { embedAltcoinGraphs } from './embedAltcoinGraph';\nimport { Row, Col } from 'react-flexbox-grid';\n\nimport './advertisement-style.css';\n\nclass AdvertisementFooter extends React.Component {\n\n    componentDidMount () {\n        embedAltcoinGraphs();\n    }\n\n    render () {\n        return (\n            <Row \n                style={{\n                    margin: 'auto',\n                    marginTop: '5px',\n                    padding: '10px',\n                    border: '2px solid rgb(0, 188, 212)',\n                    borderRadius: '5px'\n                }} >\n                <Col xs={12} sm={6} lg={3}\n                    className='embedded-element'/>\n                <Col xs={12} sm={6} lg={3}\n                    className='embedded-element'/>\n                <Col xs={12} sm={6} lg={3}\n                    className='embedded-element'/>\n                <Col xs={12} sm={6} lg={3}\n                    className='embedded-element'/>\n            </Row>\n        );\n    }\n}\n\nexport {AdvertisementFooter};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/analyzeFoods.js",["228"],"\nimport { nutrientsMap } from './nutrientsMap';\n\nconst analyzeFoods = (foodsAnalyzed) => {\n\n    const ingredientColumns = foodsAnalyzed.map((foodWrapper, index) => {\n\n        if (foodWrapper.food.desc === undefined) {\n            return {\n                Header: '---',\n                accessor: 'ingredients[' + index + ']',\n                width: 50,\n                style: {textAlign: 'center'}\n            };\n        } else {\n            return {\n                Header: foodWrapper.food.desc.name + ' [' + (foodWrapper.quantity || '--- ') + 'g]',\n                accessor: 'ingredients[' + index + ']',\n                width: 150,\n                minWidth: 150,\n                style: {textAlign: 'center'}\n            };\n        }\n    });\n\n    const customProps = (state, rowInfo, column) => {\n        \n        if (rowInfo === undefined || rowInfo.index === 0 || rowInfo.index === 10 || rowInfo.index === 14 || rowInfo.index > 16) {\n            return {};\n        } else {\n            return { /* style: {paddingLeft: '30px'} */ };\n        }\n        /*switch (rowInfo.index) {\n        case 1:\n        case 2:\n            return { style: {paddingLeft: '20px'} };\n        default:\n            return { style: {} };   \n        }*/\n    };\n\n    const columns = \n        [{Header: '', accessor: 'component', width: 200, getProps: customProps}]\n            .concat(ingredientColumns)\n            .concat([{Header: 'Total [g]', accessor: 'total', width: 100, style: {textAlign: 'center'}}]);\n\n    /* console.log('name:', foodsAnalyzed.desc.name);\n    foodsAnalyzed.nutrients.forEach((nutrient) => {\n        console.log('nutrient name:', nutrient.name, ', quantity:', nutrient.value);\n    }); */\n\n    let dataRows = [];\n\n    dataRows = Object.keys(nutrientsMap).map((key) => ({\n        component: nutrientsMap[key].name,\n        ingredients: []\n    }));\n\n    /* console.log('dataRows', dataRows); */\n    if (foodsAnalyzed.length > 0) {\n        foodsAnalyzed[0].food.nutrients.forEach((nutrient, index) => {\n            if (index > 20) return;\n            const rowIndex = Object.keys(nutrientsMap).indexOf(nutrient.nutrient_id);\n            if (rowIndex === -1) console.log('no nutrient row');\n            else dataRows[rowIndex].ingredients[0] = nutrient.value * foodsAnalyzed[0].quantity/100;\n        });\n    }\n\n    if (foodsAnalyzed.length > 1) {\n        foodsAnalyzed[1].food.nutrients.forEach((nutrient, index) => {\n            if (index > 20) return;\n            const rowIndex = Object.keys(nutrientsMap).indexOf(nutrient.nutrient_id);\n            if (rowIndex === -1) console.log('no nutrient row');\n            else dataRows[rowIndex].ingredients[1] = nutrient.value * foodsAnalyzed[1].quantity/100;\n        });\n        \n    }\n\n    if (foodsAnalyzed.length > 2) {\n        foodsAnalyzed[2].food.nutrients.forEach((nutrient, index) => {\n            if (index > 20) return;\n            const rowIndex = Object.keys(nutrientsMap).indexOf(nutrient.nutrient_id);\n            if (rowIndex === -1) console.log('no nutrient row');\n            else dataRows[rowIndex].ingredients[2] = nutrient.value * foodsAnalyzed[2].quantity/100;\n        });\n        \n    }\n\n    if (foodsAnalyzed.length > 3) {\n        foodsAnalyzed[3].food.nutrients.forEach((nutrient, index) => {\n            if (index > 20) return;\n            const rowIndex = Object.keys(nutrientsMap).indexOf(nutrient.nutrient_id);\n            if (rowIndex === -1) console.log('no nutrient row');\n            else dataRows[rowIndex].ingredients[3] = nutrient.value * foodsAnalyzed[3].quantity/100;\n        });\n    } \n    if (foodsAnalyzed.length > 4) {\n        foodsAnalyzed[4].food.nutrients.forEach((nutrient, index) => {\n            if (index > 20) return;\n            const rowIndex = Object.keys(nutrientsMap).indexOf(nutrient.nutrient_id);\n            if (rowIndex === -1) console.log('no nutrient row');\n            else dataRows[rowIndex].ingredients[4] = nutrient.value * foodsAnalyzed[4].quantity/100;\n        });\n    }\n\n\n    const data = dataRows.map((item) => \n        Object.assign(\n            {},\n            item, \n            {total: item.ingredients.reduce((x, y) => {return y === '---' ? x : (x + parseFloat(y));}, 0)}\n        )\n    );\n\n    return {columns, data};\n};\n\nexport {analyzeFoods};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/fetchResourceFromBackend.js",["229","230"],"\r\nconst port = process.env.PORT || 3000;\r\nconst production = process.env.NODE_ENV === 'production';\r\n\r\n\r\n// const backend = true ? 'https://wholeprotein.herokuapp.com:' + port : 'http://localhost:' + port;\r\n\r\nlet backend = '';\r\n\r\nif (process.env.NODE_ENV === 'development') backend = window.location.protocol + '//' + window.location.hostname + ':3000';\r\n\r\nconst fetchResourceFromBackend = (resource, options) => {\r\n\r\n    const token = localStorage.getItem('wholeprotein_token');\r\n    // shallow copy not to mutate 'options', also assures options is defined\r\n    const optionsWithAuth = Object.assign({}, options);\r\n    // If headers exists set its Authentication field, otherwise set entire headers of options.\r\n    optionsWithAuth.headers ? optionsWithAuth.headers.Authentication = token : optionsWithAuth.headers = {Authentication: token}; \r\n\r\n    console.log('API request:', resource);\r\n    return (\r\n        fetch(backend + resource, optionsWithAuth)\r\n            .then(response => {\r\n                console.log(response);\r\n                switch (response.status) {\r\n                    case 200:\r\n                        return response.json();\r\n                    case 201:\r\n                        return response.text();\r\n                    case 204:\r\n                        return;\r\n                    case 401:\r\n                        throw new Error('unauthorized');\r\n                    case 400:\r\n                        throw new Error('bad request');\r\n                    default:\r\n                        throw new Error('unknown error');\r\n                }\r\n            })\r\n    );\r\n};\r\n\r\nconst sendLoginRequestAPI = (credentials) => {\r\n\r\n    /*const data = new FormData();\r\n    data.append('json', JSON.stringify(credentials));*/\r\n\r\n    const options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(credentials)\r\n    };\r\n\r\n    return fetchResourceFromBackend('/api/login', options);\r\n};\r\n\r\nexport {fetchResourceFromBackend, sendLoginRequestAPI};\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/util/DynamicRoute.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/MyMenuContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Advertisement/embedAltcoinGraph.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/modules/utilities/nutrientsMap.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/Common/Header/MyMenu.js",["231"],"import React from 'react';\r\n\r\n/*import {menuItemActive} from './headerStyle.scss';*/\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NavigationMenu from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\n/*import ActionLabel from '@material-ui/icons/action/label';*/\r\n\r\nconst styleActive = {\r\n    border: '1px solid #3f51b5',\r\n    textAlign: 'center'\r\n};\r\nconst styleInactive = {\r\n    textAlign: 'center'\r\n};\r\n\r\nconst MyMenu = ({ navigate, activeLink, username, }) => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    if (username === '') return <div />;\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', color: 'white' }}>\r\n            {/* TODO verticalAlign hack!*/}\r\n            <span style={{ verticalAlign: 'super', color: 'white' }}>Hi {username}!</span>\r\n\r\n            <IconButton onClick={handleClick}>\r\n                <NavigationMenu style={{ color: 'white' }} />\r\n            </IconButton>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={() => { handleClose(); navigate('/profile'); }} style={activeLink === '/profile' ? styleActive : styleInactive}>Profile</MenuItem>\r\n                <MenuItem onClick={() => { handleClose(); navigate('/calendar'); }} style={activeLink === '/calendar' ? styleActive : styleInactive}>Calendar</MenuItem>\r\n                <MenuItem onClick={() => { handleClose(); navigate('/calculator'); }} style={activeLink === '/calculator' ? styleActive : styleInactive}>Calculator</MenuItem>\r\n                {/* <MenuItem onClick={() => {handleClose(); navigate('/admin'); }} style={activeLink === '/admin' ? styleActive: styleInactive}>Admin</MenuItem> */}\r\n                <MenuItem onClick={() => { handleClose(); navigate('/statistics'); }} style={activeLink === '/statistics' ? styleActive : styleInactive}>Statistics</MenuItem>\r\n                <MenuItem onClick={() => { handleClose(); navigate('/login'); }} style={activeLink === '/login' ? styleActive : styleInactive}>Log out</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { MyMenu };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/CalendarContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/StatisticsContainer.js",["232","233"],"import {connect} from 'react-redux';\n\nimport {Statistics} from './Statistics';\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\nconst mapStateToProps = (state) => ({\n\n});\n\nconst StatisticsContainer = connect(mapStateToProps, mapDispatchToProps)(Statistics);\n\nexport default StatisticsContainer;\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/ProfileContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/Profile.js",["234"],"\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\n\nimport ProfileForm from './ProfileForm';\n\nclass Profile extends React.Component {\n    render () {\n        return (\n            <Grid fluid>\n                <Row>\n                    <Col xs={12} xsOffset={0} sm={10} smOffset={1} md={8} mdOffset={2} lg={6} lgOffset={3}>\n                \n                        <div style={{position: 'relative',\n                            marginTop: '10px', marginBottom: '10px', border: '2px solid black',\n                            borderRadius: '5px', borderColor: 'rgb(0, 188, 212)'}} >\n                            \n                            <h2 style={{textAlign: 'center', color: 'rgb(0, 188, 212)'}}>\n                                My Profile\n                            </h2>\n                            \n                            <div style={{position: 'relative', width: '90%', margin: 'auto'}}>\n                                <ProfileForm onSubmit={this.props.calculateCaloriesTarget} caloriesTarget={this.props.caloriesTarget}/>\n                            </div>\n                        </div>\n                    \n                    </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nexport {Profile};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/Statistics.js",["235"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\n\nimport {CaloriesGraphContainer} from './CaloriesGraphContainer';\n\nclass Statistics extends React.Component {\n    render () {\n\n        return (\n            <Grid fluid>\n                <Row>\n                    <Col xs={12} \n                        style={{\n                            minWidth: '700px',\n                            margin: '20px 0px',\n                            border: '1px solid rgb(0, 188, 212)',\n                            minHeight: '600px'\n                        }}>\n                \n                        \n                        <CaloriesGraphContainer />\n                    \n                    </Col>\n                </Row>\n            </Grid>\n\n        );\n    }\n}\n\nexport {Statistics};\n\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/Calculator.js",["236","237"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Row, Column} from 'react-flexbox-grid';\n\nimport {CalculatorForm} from './CalculatorForm/CalculatorForm';\nimport {NutritionResultsTableContainer} from './NutritionResultsTable/NutritionResultsTableContainer';\nimport {DataSaverContainer} from './DataSaver/DataSaverContainer';\n\nclass Calculator extends React.Component {\n    render () {\n\n        const {calculateHandler} = this.props;\n\n        return (\n            <Grid fluid style={{padding: '10px'}}>\n\n                <DataSaverContainer />\n\n                <CalculatorForm \n                    onSubmit={(values) => {calculateHandler(values.nutrients, this.props.dataSource);}} />\n\n                <NutritionResultsTableContainer />\n                \n            </Grid>\n        );\n    }\n}\n\nCalculator.propTypes = {\n    calculateHandler: PropTypes.func.isRequired\n};\n\n\nexport {Calculator};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/index.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/Calendar.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/CaloriesGraphContainer.js",["238"],"import {connect} from 'react-redux';\n/* import moment from 'moment'; */\nimport CaloriesGraph from './CaloriesGraph';\n\n/* const nutrientsIntakeData = [\n    {\n        y: 1000,\n        x: moment(new Date('2017-08-16')),\n        color: 0\n    },\n    {\n        y: 1300,\n        x: moment(new Date('2017-08-17')),\n        color: 1\n    },\n    {\n        y: 1200,\n        x: moment(new Date('2017-08-18')),\n        color: 1\n    },\n    {\n        y: 900,\n        x: moment(new Date('2017-08-19')),\n        color: 1\n    }\n];  */\n\nconst mapDispatchToProps = (dispatch) => ({\n    onDataClick: (dataPoint) => {console.log(dataPoint);}\n});\n\nconst mapStateToProps = (state) => ({\n    nutrientsIntakeData:  state.dailyData.sort((a, b) => b.x - a.x) ,\n    optimalIntake: state.caloriesTarget\n});\n\nconst CaloriesGraphContainer = connect(mapStateToProps, mapDispatchToProps)(CaloriesGraph);\n\nexport {CaloriesGraphContainer};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Profile/ProfileForm.js",["239","240","241","242","243"],"import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\n\r\nimport { Row, Col } from 'react-flexbox-grid';\r\n\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst fieldStyle = {\r\n    width: '100%',\r\n    marginBottom: '10px',\r\n    marginLeft: '2px'\r\n};\r\n\r\nconst fieldStyle2 = {\r\n    width: '100px',\r\n    marginLeft: '5px',\r\n    marginBottom: '10px'\r\n};\r\n\r\nclass MyTextField extends React.Component {\r\n    render() {\r\n        const { input, meta, type, label } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    {...input}\r\n                    type={type}\r\n                    label={label}\r\n                    fullWidth={true}\r\n                    errorText={meta.error && 'required'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass MyRadioField extends React.Component {\r\n    render() {\r\n        const { input, meta, label } = this.props;\r\n\r\n        return (\r\n\r\n            <RadioGroup\r\n                name={input.name}\r\n                valueSelected={input.value}\r\n                {...input}\r\n                style={{ border: '1px solid lightgray', margin: 'auto', textAlign: 'center', height: '52px', paddingTop: '10px' }}>\r\n                <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n                <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n            </RadioGroup>\r\n        );\r\n    }\r\n}\r\n\r\nclass MySelectField extends React.Component {\r\n    render() {\r\n        const { input, meta, label } = this.props;\r\n\r\n        return (\r\n\r\n            <TextField\r\n                select\r\n                label={label}\r\n                fullWidth={true}\r\n                {...input}\r\n                onChange={(event, key, payload) => { input.onChange(payload); }} >\r\n\r\n                <MenuItem value='none' primaryText=\"None\" />\r\n                <MenuItem value='minor' primaryText=\"Minor walking\" />\r\n                <MenuItem value='average' primaryText=\"Walking and minor excercise\" />\r\n                <MenuItem value='heavy' primaryText=\"Heavier excercise or sports\" />\r\n                <MenuItem value='pro' primaryText=\"Professional excercise or sports\" />\r\n            </TextField>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet ProfileForm = props => {\r\n\r\n    const { handleSubmit, caloriesTarget } = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='firstName' label='First Name' component={MyTextField} />\r\n            <Field name='lastName' label='Last Name' component={MyTextField} />\r\n            <Field name='email' label='E-mail' component={MyTextField} type='email' />\r\n\r\n            <Row>\r\n                <Col xs={6} style={{ minWidth: '200px' }}>\r\n                    <Field name='height' label='Height' component={MyTextField} type='number' />\r\n                </Col>\r\n                <Col xs={6} style={{ minWidth: '200px' }}>\r\n                    <Field name='weight' label='Weight' component={MyTextField} type='number' />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xs={6} style={{ minWidth: '200px' }}>\r\n                    <Field name='age' label='Age' component={MyTextField} type='number' />\r\n                </Col>\r\n                <Col xs={6} style={{ minWidth: '200px' }}>\r\n                    <Field name='sex' label='Sex' component={MyRadioField} />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n            <div>\r\n                <Field name='activity' label='Physical activity' component={MySelectField} />\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px', marginBottom: '20px' }}>\r\n                <Button\r\n                    variant='outlined'\r\n                    style={{}}\r\n                    label='Calculate Calories Target'\r\n                    color='primary'\r\n                    type=\"submit\" />\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\r\n                <div style={{ fontSize: 24 }}>\r\n                    <span style={{\r\n                        display: 'inline-block',\r\n                        border: '1px solid rgb(0, 188, 212)',\r\n                        borderRadius: '4px',\r\n                        width: '100px',\r\n                        textAlign: 'center',\r\n                        marginLeft: '100px'\r\n                    }}>\r\n                        {caloriesTarget.toFixed(0)}\r\n                    </span>\r\n                    <span style={{\r\n                        display: 'inline-block',\r\n                        width: '100px',\r\n                        textAlign: 'left',\r\n                        marginLeft: '5px'\r\n                    }}>\r\n                        kcal\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <Button style={{margin: 'auto', display: 'block', width:'100px', marginBottom: '10px'}}\r\n                    variant='outlined'\r\n                label='Save'\r\n                color='primary'\r\n                onClick={() => {}} /> */}\r\n        </form>\r\n    );\r\n};\r\n\r\nProfileForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'profile',\r\n    destroyOnUnmount: false,\r\n    initialValues: { sex: 'female', activity: 'minor', firstName: 'rafa', height: '200', weight: '100', age: 30 }\r\n})(ProfileForm);\r\n\r\nexport default ProfileForm;\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/DataSaver/DataSaverContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/NutritionResultsTable/NutritionResultsTableContainer.js",["244"],"import {connect} from 'react-redux';\n\nimport {NutritionResultsTable} from './NutritionResultsTable';\n\nconst mapDispatchToProps = (dispatch) => ({\n});\n\nconst mapStateToProps = (state) => ({\n    foodsAnalyzed: state.nutrients.foodsAnalyzed\n});\n\nconst NutritionResultsTableContainer = connect(mapStateToProps, mapDispatchToProps)(NutritionResultsTable);\n\nexport {NutritionResultsTableContainer};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/LoginBoxContainer.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/CalculatorForm.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/MyDayBackgroundWrapper.js",["245","246"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport {MyDialog} from './MyDialog';\r\n\r\nclass MyDayBackgroundWrapper extends React.Component {\r\n\r\n    state = {\r\n        marked: undefined,\r\n        dialogOpen: false\r\n    }\r\n\r\n    dateSelectHandler = () => {\r\n\r\n        if (this.state.marked) {\r\n            console.log('marked date');\r\n            this.setState({\r\n                dialogOpen: true\r\n            });\r\n        } else {\r\n            this.editDateHandler();\r\n        }\r\n    }\r\n\r\n    closeDialog = () => {\r\n        this.setState({\r\n            dialogOpen: false\r\n        });\r\n    }\r\n\r\n    editDateHandler = () => {\r\n        const {value, editDateHandler} = this.props;\r\n\r\n        editDateHandler(value.toDateString(), this.state.marked);\r\n    }\r\n\r\n    componentWillMount () {\r\n        \r\n        const {value, markedDates} = this.props;\r\n\r\n        if (markedDates.find((date) => (date.toDateString() === value.toDateString()))){\r\n            this.setState({\r\n                marked: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div \r\n                style={{\r\n                    flexBasis: '14.285714285714285%',\r\n                    maxWidth: '14.285714285714285%'}}\r\n                className='rbc-day-bg'\r\n                >\r\n                <Button \r\n                    style={{\r\n                        marginTop: '20px',\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        minWidth: '0px'\r\n                    }}\r\n                    backgroundColor={this.state.marked && 'aqua'}\r\n                    hoverColor='lightgray'\r\n                    onClick={this.dateSelectHandler}>\r\n                    \r\n                    {this.state.marked ? <div /> : <div />}\r\n                </Button>\r\n                <MyDialog open={this.state.dialogOpen} onClose={this.closeDialog} onConfirm={this.editDateHandler} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {MyDayBackgroundWrapper};\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Statistics/CaloriesGraph.js",["247","248","249","250","251","252","253","254"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {XYPlot, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineSeries, LineMarkSeries, MarkSeries, Crosshair } from 'react-vis';\nimport moment from 'moment';\n\nimport Dimensions from 'react-dimensions';\n\nimport 'react-vis/dist/style.css';\n/* import styles2 from 'react-vis/dist/styles/legends.scss'; */\nimport './graph-styles.css';\n\nclass CaloriesGraph extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: -1\n        };\n    }\n\n    render () {\n\n        const {nutrientsIntakeData, optimalIntake, onDataClick, containerWidth, containerHeight} = this.props;\n        console.log(nutrientsIntakeData);\n        \n        /* const yMin = Math.min(...nutrientsIntakeData.map((item => item.calories))) * 0.5; */\n        const yMax = Math.max(...nutrientsIntakeData.map((item => item.y)), optimalIntake) * 1.3;\n        /* cloning moment with moment() */\n        const xMin = moment(moment.min(...nutrientsIntakeData.map((item => item.x)))).subtract(1, 'day');\n        const xMax = moment(moment.max(...nutrientsIntakeData.map((item => item.x)))).add(1, 'day');\n\n        let nutrientsIntakeData2 = nutrientsIntakeData.map((point, index) => \n            {index === this.state.index ? point.color = 1 : point.color = 0; point.index=index; return point;} \n        );\n\n        console.log(xMax, xMin);\n        return (\n            <XYPlot height={containerHeight-30} width={containerWidth-60} style={{padding: '0px 30px 30px 30px'}} \n                xType='time'\n                xDomain={[xMin.toDate() , xMax.toDate()]} \n                yDomain={[0, yMax]} >\n                <VerticalGridLines style={{stroke: 'darkgray'}}\n                    tickTotal={(xMax.toDate() - xMin.toDate())/1000/3600/24}/>\n                <HorizontalGridLines style={{stroke: 'darkgray'}}/>\n                <XAxis title='date' style={{title: {textAnchor: 'end'}}}\n                    tickTotal={(xMax.toDate() - xMin.toDate())/1000/3600/24}\n                    tickFormat={v => v.getDate() + '/' + (v.getMonth()+1) + '/' + v.getFullYear()}\n                    tickLabelAngle={-45} />\n                <YAxis title='calories [kcal]'/>\n                \n                <LineSeries color='purple'\n                    data={[{x:xMin, y: optimalIntake}, {x: xMax, y: optimalIntake}]} />\n                \n                <LineMarkSeries data={nutrientsIntakeData2} \n                    size={12}\n                    colorDomain={[0,1]}\n                    colorRange={['rgb(0, 188, 212)', 'black']}\n                    onValueClick={(datapoint, event)=>{\n                        onDataClick(datapoint);\n                    }}\n                    onValueMouseOver={(datapoint, event) => {\n                        this.setState({index: datapoint.index}); \n                    }}\n                    onValueMouseOut={(datapoint, event) => {\n                        this.setState({index: -1});\n                    }} />\n            </XYPlot>\n        );\n    }\n}\n\n\nexport default Dimensions()(CaloriesGraph);\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/DataSaver/DataSaver.js",["255","256"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* import {MyDatePicker} from './MyDatePicker'; */\r\n\r\nimport './my-date-picker.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport moment from 'moment';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { Row, Col } from 'react-flexbox-grid';\r\n\r\nclass DataSaver extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snackbarOpen: false\r\n        };\r\n    }\r\n\r\n    toggleSnackbar = (open) => {\r\n        this.setState({\r\n            snackbarOpen: open\r\n        });\r\n    }\r\n\r\n    onSaveHandler = () => {\r\n\r\n        const { saveData, foodsAnalyzed } = this.props;\r\n\r\n        saveData(moment(this.props.activeDate).startOf('day'), foodsAnalyzed);\r\n\r\n        this.toggleSnackbar(true);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { foodsAnalyzed, activeDate, activeDateClickHandler, isEdit } = this.props;\r\n\r\n        const snacbarMessage =\r\n            (isEdit ? 'Edited!' : 'Saved!')\r\n            + ' (date: ' +\r\n            moment(activeDate).format('YYYY-MM-DD') +\r\n            ', calories: ' +\r\n            foodsAnalyzed.data[3].total + ')';\r\n\r\n        return (\r\n            <Row style={{ height: '38px', marginBottom: '-10px' }} end='xs'>\r\n\r\n                <Col xs={3} md={2} lg={1}>\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        disabled={this.state.snackbarOpen}\r\n                        onClick={this.onSaveHandler}\r\n                        style={{ width: '40px', minWidth: '40px' }}\r\n                    >\r\n                        <SaveIcon />\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={4} sm={3} lg={2} style={{ minWidth: '270px' }}>\r\n\r\n                    <Button\r\n                        variant='outlined'\r\n                        onClick={activeDateClickHandler}\r\n                        style={{ width: '100%', }}\r\n                    >\r\n                        {activeDate || '<SELECT DATE>'}\r\n                    </Button>\r\n\r\n                    {/* <div style={{fontSize: '18px', fontWeight: 'bold', textAlign: 'center', padding: '8px', cursor: 'pointer', border: '1px solid rgb(0, 188, 212)'}}\r\n                        onClick={activeDateClickHandler}\r\n                    >\r\n                        {activeDate || '<SELECT DATE>'}\r\n                    </div> */}\r\n                </Col>\r\n\r\n                <Snackbar\r\n                    open={this.state.snackbarOpen}\r\n                    message={snacbarMessage}\r\n                    autoHideDuration={3000}\r\n                    onRequestClose={() => { this.toggleSnackbar(false); }}\r\n                    contentStyle={{ fontSize: 24, color: 'white' }}\r\n                    bodyStyle={{ backgroundColor: 'rgb(0, 188, 212)' }}\r\n                />\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport { DataSaver };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/NutritionResultsTable/NutritionResultsTable.js",["257"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nconst tableStyleOuter = {\n    marginLeft: '-5px',\n    marginRight: '-5px',\n    marginTop: '30px',\n    border: '2px solid rgb(0, 188, 212)',\n    borderRadius: '5px'\n};\n\nclass NutritionResultsTable extends React.Component {\n    render () {\n\n        const {foodsAnalyzed} = this.props;\n\n        return (\n            <div style={tableStyleOuter}>\n                \n                <ReactTable \n                    data={foodsAnalyzed.data}\n                    columns={foodsAnalyzed.columns}\n                    showPagination={false}\n                    pageSizeOptions={[10, 15, 25, 50, 100]}\n                    defaultPageSize={25} />\n            </div>\n        );\n    }\n}\n\nNutritionResultsTable.propTypes = {\n    /* nutrientsList: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        nutrientsProportion: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n        quantity: PropTypes.number.isRequired\n    }).isRequired).isRequired */\n};\n\n\nexport {NutritionResultsTable};\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/LoginBoxForm.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/NutrientsListComponent.js",["258","259"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { NutrientRow } from './NutrientRow';\r\n\r\nimport { Row, Col } from 'react-flexbox-grid';\r\n\r\nconst calculateButtonStyle = {\r\n    marginLeft: '5px',\r\n    marginRight: '5px',/*\r\n    paddingLeft: '10px',\r\n    paddingRight: '10px'*/\r\n};\r\n\r\nclass NutrientsListComponent extends React.Component {\r\n\r\n    render() {\r\n\r\n        const { fields, meta: { error, submitFailed } } = this.props;\r\n        return (\r\n            <div style={{ paddingLeft: '2%', paddingRight: '0px' }}>\r\n                {fields.map((item, index) => (\r\n                    <NutrientRow key={index} item={item} index={index} fields={fields} />\r\n                ))}\r\n                <Row style={{ paddingTop: '10px' }}>\r\n                    <Col xs={12} style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <Button variant='outlined' color='primary' style={calculateButtonStyle} type='button' onClick={() => fields.push({ name: undefined, quantity: undefined })}>\r\n                            + Add ingredient\r\n                        </Button>\r\n                        <Button variant='outlined' color='secondary' style={calculateButtonStyle} type='submit'>\r\n                            Calculate\r\n                        </Button>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNutrientsListComponent.propTypes = {\r\n    fields: PropTypes.shape({\r\n        map: PropTypes.func.isRequired\r\n    }).isRequired,\r\n    meta: PropTypes.object\r\n};\r\n\r\nexport { NutrientsListComponent };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calendar/MyDialog.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Login/MyTextField.js",["260"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass MyTextField extends React.Component {\r\n\r\n    render() {\r\n\r\n        const { label, type, input, meta } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    {...input}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    label={label}\r\n                    type={type}\r\n                    autoComplete='off'\r\n                    style={{ margin: '0.5rem auto' }}\r\n                />\r\n                {input.error && <span>Invalid</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMyTextField.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    input: PropTypes.object,\r\n    meta: PropTypes.object\r\n};\r\n\r\nexport { MyTextField };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/NutrientRow.js",["261"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Grid } from '@material-ui/core';\r\nimport { FieldComponent } from './FieldComponent';\r\nimport DeleteForever from '@material-ui/icons/DeleteForever'\r\n\r\nclass NutrientRow extends React.Component {\r\n    render() {\r\n\r\n        const { item, fields, index } = this.props;\r\n\r\n        return (\r\n            <Grid container spacing={2} style={{ alignItems: 'flex-end', margin: '1rem 0rem' }}>\r\n                <Grid item xs={8}>\r\n                    <FieldComponent\r\n                        controlId={`${item}.name`}\r\n                        type='text'\r\n                        label='Ingredient name' />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <FieldComponent\r\n                        controlId={`${item}.quantity`}\r\n                        type='number'\r\n                        label='Serving size [g]' />\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    <DeleteForever onClick={() => { fields.remove(index); }} style={{ cursor: 'pointer' }} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nNutrientRow.propTypes = {\r\n    item: PropTypes.string.isRequired\r\n};\r\n\r\nexport { NutrientRow };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/FieldComponent.js",[],"/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/FormControlWrapperContainer.js",["262","263"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { MyAutosuggest } from './MyAutosuggest';\r\n\r\nclass FormControlWrapper extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        const { input, meta, label, type, dataSource } = this.props;\r\n\r\n        return (\r\n\r\n            <div>\r\n                {/*Autosuggest if it is the ingredient name from control, rather than quantity*/}\r\n                {input.name.match(/\\.name$/) ?\r\n\r\n                    <MyAutosuggest label={label} input={input} dataSource={dataSource} />\r\n\r\n                    : <TextField\r\n                        {...input}\r\n                        type={type}\r\n                        label={label}\r\n                        fullWidth={true}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFormControlWrapper.propTypes = {\r\n    // TODO: check if should be object or array, conceptually\r\n    // TODO: check what to do with input and meta\r\n    dataSource: PropTypes.array,\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    /*fetchIngredientSuggestions: (value) => {dispatch(fetchIngredientSuggestions(value));}*/\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    dataSource: state.ingredients.ingredients\r\n});\r\n\r\nconst FormControlWrapperContainer = connect(mapStateToProps, mapDispatchToProps)(FormControlWrapper);\r\n\r\nexport { FormControlWrapperContainer };\r\n","/home/croraf/Desktop/Programiranje/Projects/nutrients-calculator/frontend/src/routes/Calculator/CalculatorForm/MyAutosuggest.js",["264","265","266"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nimport styles from './myAutosuggest.css';\r\n\r\nclass MyAutosuggest extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Autosuggest is a controlled component.\r\n        // This means that you need to provide an input value\r\n        // and an onChange handler that updates this value (see below).\r\n        // Suggestions also need to be provided to the Autosuggest,\r\n        // and they are initially empty because the Autosuggest is closed.\r\n        this.state = {\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n    getSuggestionValue = suggestion => suggestion\r\n\r\n    getSuggestions = value => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength <= 2 ? [] : this.props.dataSource.map(food => food.name).filter(ingredient =>\r\n            ingredient.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n    }\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: this.getSuggestions(value)\r\n        });\r\n    }\r\n\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    }\r\n\r\n    onSuggestionSelected = (event, suggestion) => {\r\n        this.props.input.onChange(suggestion.suggestion);\r\n    }\r\n\r\n    renderSuggestion = suggestion => (\r\n        <div style={{\r\n            width: '100%',\r\n            padding: '5px',\r\n            paddingTop: '10px',\r\n            paddingBottom: '10px',\r\n            cursor: 'pointer'\r\n        }}>\r\n            {suggestion}\r\n        </div>\r\n    )\r\n\r\n    renderInputComponent = (input) => {\r\n        return (\r\n            <TextField\r\n                {...input}\r\n                fullWidth={true}\r\n                autoComplete=\"off\"\r\n\r\n                style={{ position: 'relative' }}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderSuggestionsContainer = ({ containerProps, children, query }) => {\r\n        return (\r\n            children &&\r\n            <div {...containerProps} style={{\r\n                border: '1px solid black',\r\n                position: 'absolute',\r\n                top: '70px',\r\n                backgroundColor: 'white',\r\n                zIndex: 100,\r\n                width: '100%',\r\n                maxHeight: 500,\r\n                overflowY: 'auto',\r\n                overflowX: 'hidden'\r\n            }}>\r\n                {children}\r\n                {/*<div>\r\n                    Press Enter to search <strong>{query}</strong>\r\n                </div>*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        const { label, input } = this.props;\r\n\r\n        return (\r\n            <Autosuggest\r\n                suggestions={this.state.suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={this.getSuggestions}\r\n                renderSuggestion={this.renderSuggestion}\r\n                onSuggestionSelected={this.onSuggestionSelected}\r\n                inputProps={{\r\n                    label: label,\r\n                    ...input\r\n                }}\r\n                renderInputComponent={this.renderInputComponent}\r\n                renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport { MyAutosuggest };\r\n",["267","268"],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":1,"column":9,"nodeType":"275","messageId":"276","endLine":1,"endColumn":33},{"ruleId":"273","severity":1,"message":"277","line":35,"column":7,"nodeType":"275","messageId":"276","endLine":35,"endColumn":19},{"ruleId":"273","severity":1,"message":"278","line":16,"column":32,"nodeType":"275","messageId":"276","endLine":16,"endColumn":37},{"ruleId":"273","severity":1,"message":"279","line":5,"column":29,"nodeType":"275","messageId":"276","endLine":5,"endColumn":37},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"281","line":26,"column":42,"nodeType":"275","messageId":"276","endLine":26,"endColumn":48},{"ruleId":"273","severity":1,"message":"282","line":2,"column":7,"nodeType":"275","messageId":"276","endLine":2,"endColumn":11},{"ruleId":"273","severity":1,"message":"283","line":3,"column":7,"nodeType":"275","messageId":"276","endLine":3,"endColumn":17},{"ruleId":"273","severity":1,"message":"284","line":9,"column":10,"nodeType":"275","messageId":"276","endLine":9,"endColumn":14},{"ruleId":"273","severity":1,"message":"279","line":5,"column":29,"nodeType":"275","messageId":"276","endLine":5,"endColumn":37},{"ruleId":"273","severity":1,"message":"285","line":9,"column":26,"nodeType":"275","messageId":"276","endLine":9,"endColumn":31},{"ruleId":"273","severity":1,"message":"280","line":3,"column":8,"nodeType":"275","messageId":"276","endLine":3,"endColumn":17},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"286","line":4,"column":15,"nodeType":"275","messageId":"276","endLine":4,"endColumn":18},{"ruleId":"273","severity":1,"message":"287","line":4,"column":20,"nodeType":"275","messageId":"276","endLine":4,"endColumn":26},{"ruleId":"273","severity":1,"message":"279","line":28,"column":29,"nodeType":"275","messageId":"276","endLine":28,"endColumn":37},{"ruleId":"273","severity":1,"message":"288","line":14,"column":7,"nodeType":"275","messageId":"276","endLine":14,"endColumn":17},{"ruleId":"273","severity":1,"message":"289","line":20,"column":7,"nodeType":"275","messageId":"276","endLine":20,"endColumn":18},{"ruleId":"273","severity":1,"message":"290","line":45,"column":24,"nodeType":"275","messageId":"276","endLine":45,"endColumn":28},{"ruleId":"273","severity":1,"message":"291","line":45,"column":30,"nodeType":"275","messageId":"276","endLine":45,"endColumn":35},{"ruleId":"273","severity":1,"message":"290","line":63,"column":24,"nodeType":"275","messageId":"276","endLine":63,"endColumn":28},{"ruleId":"273","severity":1,"message":"279","line":5,"column":29,"nodeType":"275","messageId":"276","endLine":5,"endColumn":37},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"292","severity":1,"message":"293","line":57,"column":1,"nodeType":"294","messageId":"295","endLine":57,"endColumn":17,"fix":"296"},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"297","line":4,"column":99,"nodeType":"275","messageId":"276","endLine":4,"endColumn":109},{"ruleId":"273","severity":1,"message":"298","line":4,"column":111,"nodeType":"275","messageId":"276","endLine":4,"endColumn":120},{"ruleId":"292","severity":1,"message":"299","line":34,"column":1,"nodeType":"294","messageId":"295","endLine":34,"endColumn":13,"fix":"300"},{"ruleId":"273","severity":1,"message":"301","line":59,"column":47,"nodeType":"275","messageId":"276","endLine":59,"endColumn":52},{"ruleId":"273","severity":1,"message":"301","line":62,"column":51,"nodeType":"275","messageId":"276","endLine":62,"endColumn":56},{"ruleId":"273","severity":1,"message":"302","line":65,"column":39,"nodeType":"275","messageId":"276","endLine":65,"endColumn":48},{"ruleId":"273","severity":1,"message":"301","line":65,"column":50,"nodeType":"275","messageId":"276","endLine":65,"endColumn":55},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"303","line":13,"column":8,"nodeType":"275","messageId":"276","endLine":13,"endColumn":18},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"304","line":20,"column":33,"nodeType":"275","messageId":"276","endLine":20,"endColumn":38},{"ruleId":"273","severity":1,"message":"305","line":20,"column":40,"nodeType":"275","messageId":"276","endLine":20,"endColumn":52},{"ruleId":"273","severity":1,"message":"290","line":10,"column":37,"nodeType":"275","messageId":"276","endLine":10,"endColumn":41},{"ruleId":"306","severity":1,"message":"307","line":6,"column":61,"nodeType":"308","messageId":"309","endLine":7,"endColumn":1,"fix":"310"},{"ruleId":"273","severity":1,"message":"290","line":14,"column":24,"nodeType":"275","messageId":"276","endLine":14,"endColumn":28},{"ruleId":"273","severity":1,"message":"279","line":48,"column":29,"nodeType":"275","messageId":"276","endLine":48,"endColumn":37},{"ruleId":"273","severity":1,"message":"280","line":2,"column":8,"nodeType":"275","messageId":"276","endLine":2,"endColumn":17},{"ruleId":"273","severity":1,"message":"311","line":7,"column":8,"nodeType":"275","messageId":"276","endLine":7,"endColumn":14},{"ruleId":"273","severity":1,"message":"312","line":75,"column":63,"nodeType":"275","messageId":"276","endLine":75,"endColumn":68},{"ruleId":"269","replacedBy":"313"},{"ruleId":"271","replacedBy":"314"},"no-native-reassign",["315"],"no-negated-in-lhs",["316"],"no-unused-vars","'fetchResourceFromBackend' is defined but never used.","Identifier","unusedVar","'saveDialogue' is assigned a value but never used.","'index' is defined but never used. Allowed unused args must match /^_/u.","'dispatch' is defined but never used. Allowed unused args must match /^_/u.","'PropTypes' is defined but never used.","'column' is defined but never used. Allowed unused args must match /^_/u.","'port' is assigned a value but never used.","'production' is assigned a value but never used.","'Link' is defined but never used.","'state' is defined but never used. Allowed unused args must match /^_/u.","'Row' is defined but never used.","'Column' is defined but never used.","'fieldStyle' is assigned a value but never used.","'fieldStyle2' is assigned a value but never used.","'meta' is assigned a value but never used.","'label' is assigned a value but never used.","indent","Expected indentation of 12 spaces but found 16.","Punctuator","wrongIndentation",{"range":"317","text":"318"},"'MarkSeries' is defined but never used.","'Crosshair' is defined but never used.","Expected indentation of 8 spaces but found 12.",{"range":"319","text":"320"},"'event' is defined but never used. Allowed unused args must match /^_/u.","'datapoint' is defined but never used. Allowed unused args must match /^_/u.","'IconButton' is defined but never used.","'error' is assigned a value but never used.","'submitFailed' is assigned a value but never used.","semi","Missing semicolon.","ImportDeclaration","missingSemi",{"range":"321","text":"322"},"'styles' is defined but never used.","'query' is defined but never used. Allowed unused args must match /^_/u.",["315"],["316"],"no-global-assign","no-unsafe-negation",[1334,1350],"            ",[1266,1278],"        ",[222,222],";"]